When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
y_1 <- c(1.0, 2.0, 1.1, 2.1)
reticulate::repl_python()
y_1 <- c(1.0, 2.0, 1.1, 2.1)
reticulate::repl_python()
y_1 = (1.0, 2.0, 1.1, 2.1)
reticulate::repl_python()
y_1 = [1.0, 2.0, 1.1, 2.1]
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5)
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5)
t_score <- function(y_1, y_2){
y_1_mean <- mean(y_1)
y_2_mean <- mean(y_2)
n_1 <- length(y_1)
n_2 <- length(y_2)
}
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5)
cal_t_score <- function(y_1, y_2){
y_1_mean <- mean(y_1)
y_2_mean <- mean(y_2)
n_1 <- length(y_1)
n_2 <- length(y_2)
s2_1 <- var(y_1)
s2_2 <- var(y_2)
s2_p = ((n_1 - 1) * s2_1+ (n_2 - 1) * s2_2) / (n_1 + n_2 - 2)
t_score <- (y_1_mean - y_2_mean) / (sqrt(s2_p) * sqrt(1 / n_1 + 1 / n_2))
}
t_score = cal_t_score(y_1, y_2)
t.test(y_1 ~ y_2)
t.test(y_1 ~ y_2, paired = FALSE)
t.test(y_1 ~ y_2, paired = FALSE)
t.test(y_1 ~ y_2, var.equal=TRUE)
t.test(y_1 ~ y_2, var.equal=FALSE)
t.test(y_1~y_2, paired=FALSE)
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5)
t.test(y_1~y_2, paired=FALSE)
t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
a <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[0]
p_value <- results[1]
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results(1)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]
p_value <- results[2]
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- $results[1]
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1].t
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results.t
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]
p_value <- results[2]
p_value
$p_value
p_value.df
p_value
p_value.parameter
p_value.$parameter
p_value$parameter
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[2]$parameter
p_value
p_value == 1
a <- c(1, 2)
a
a <- c(1, 2, 3, 4, 5)
a
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[2]$parameter
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[2]$parameter
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[2]$parameter
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5, 2.1)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[2]$parameter
gc()
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5, 2.1)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[2]$parameter
p_value
View(results)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[2]$p.value
View(results)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[3]
View(results)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[3]$p.value
y_1 <- c(1.0, 2.0, 1.1, 2.1, 0.5, 1.9)
y_2 <- c(0.5, 0.6, 7.0, 2.1, 3.3, 4.3, 2.0, 1.5, 2.1)
results <- t.test(y_1, y_2, alternative = "two.sided", var.equal = FALSE)
t_score <- results[1]$statistic
p_value <- results[3]$p.value
library(ggplot2)
ggplot(y_1, y_2)
library(ggplot2)
ggplot(y_1 ~ y_2)
library(ggplot2)
#ggplot(y_1 ~ y_2)
library(ggplot2)
ggplot(y_1)
library(ggplot2)
plot(y_1)
library(ggplot2)
plot(1, y_1)
library(ggplot2)
plot('1', y_1)
library(ggplot2)
plot('1', y_1)
library(ggplot2)
x <- c('1') * length(y_1)
library(ggplot2)
x <- rep('1', times=5)
plot(x, y_1)
library(ggplot2)
x <- rep('1', times=length(y_1))
plot(x, y_1)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1)
plot(rep('2', times=length(y_2)), y_2)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1) + plot(rep('2', times=length(y_2)), y_2)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1) + plot(rep('2', times=length(y_2)), y_2)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1) + plot(rep('2', times=length(y_2)), y_2)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1) + plot(rep('2', times=length(y_2)), y_2)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1) + plot(rep('2', times=length(y_2)), y_2)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1) + plot(rep('2', times=length(y_2)), y_2)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1)
plot(rep('2', times=length(y_2)), y_2)
#library(ggplot2)
plot(rep('1', times=length(y_1)), y_1)
plot(rep('2', times=length(y_2)), y_2)
library(ggplot2)
ggplot(rep('1', times=length(y_1)), y_1)
library(ggplot2)
plot(rep('1', times=length(y_1)), y_1)
plot(rep('2', times=length(y_2)), y_2)
